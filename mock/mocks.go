// Code generated by MockGen. DO NOT EDIT.
// Source: goelster/models (interfaces: SkuMock)

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSkuMock is a mock of SkuMock interface.
type MockSkuMock struct {
	ctrl     *gomock.Controller
	recorder *MockSkuMockMockRecorder
}

// MockSkuMockMockRecorder is the mock recorder for MockSkuMock.
type MockSkuMockMockRecorder struct {
	mock *MockSkuMock
}

// NewMockSkuMock creates a new mock instance.
func NewMockSkuMock(ctrl *gomock.Controller) *MockSkuMock {
	mock := &MockSkuMock{ctrl: ctrl}
	mock.recorder = &MockSkuMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkuMock) EXPECT() *MockSkuMockMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockSkuMock) First(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockSkuMockMockRecorder) First(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockSkuMock)(nil).First), arg0)
}

// GetAllProduct mocks base method.
func (m *MockSkuMock) GetAllProduct(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllProduct", arg0)
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockSkuMockMockRecorder) GetAllProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockSkuMock)(nil).GetAllProduct), arg0)
}

// GetByFeild mocks base method.
func (m *MockSkuMock) GetByFeild(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetByFeild", arg0)
}

// GetByFeild indicates an expected call of GetByFeild.
func (mr *MockSkuMockMockRecorder) GetByFeild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFeild", reflect.TypeOf((*MockSkuMock)(nil).GetByFeild), arg0)
}

// Save mocks base method.
func (m *MockSkuMock) Save(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSkuMockMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSkuMock)(nil).Save), arg0)
}

// UpdateSku mocks base method.
func (m *MockSkuMock) UpdateSku(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSku", arg0)
}

// UpdateSku indicates an expected call of UpdateSku.
func (mr *MockSkuMockMockRecorder) UpdateSku(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSku", reflect.TypeOf((*MockSkuMock)(nil).UpdateSku), arg0)
}

// Where mocks base method.
func (m *MockSkuMock) Where(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockSkuMockMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSkuMock)(nil).Where), varargs...)
}
